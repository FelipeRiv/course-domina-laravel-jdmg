#reset DB and store the fake data
php artisan migrate:fresh --seed

56

## memory
$order = App\Models\Order::factory()->make();
$payment = App\Models\Payment::factory()->make( ['order_id' => $order->id] );

## DB
$order = App\Models\Order::factory()->create();
$payment = App\Models\Payment::factory()->create( ['order_id' => $order->id] );
$order->payment;

$payment->order;

// other
$payment->order();
$payment->order()->get(); // where etc is a query builder

---------------------------------------------------------

57

$user = App\Models\User::factory()->create();

$order = App\Models\Order::factory()->create(['customer_id' => $user->id]);

$user->orders; // error if customer_id not configure correctly
$order->user; // null if customer_id not configure correctly

## create an order linked to a user - save does the save but it allows instances , make returns an obj if we want to use it we will have to parse it to an array to use create method but we can use save instead

$user->orders()->save( App\Models\Order::factory()->make() );

$user = App\Models\User::first();

$user->orders; // a list of 2 if not create another order based on an user

-----------------------------------------------------------

58 Usando y creando relaciones muchos a muchos con Eloquent

php artisan make:migration CreateCartProductTable
php artisan make:migration CreateOrderProductTable

php artisan migrate:fresh --seed

php artisan tinker

$user = App\Models\User::factory()->create();
$order = App\Models\Order::factory()->create(['customer_id' => $user->id]);

$cart = App\Models\Cart::factory()->create();

$cart->products; // empty
$order->products; // empty

$order->attach();

// populate the relationship between tables in many to many relationship

// * insert through the relationship between order and product
// $order->products()->attach( [ 1,2,3,4] ); // * attach with the product ids it will fail bc we have the quantity linked to it

// * we have to say the quantity for the product id 1 and the product id 2 etc 
$order->products()->attach( [ 1 => ['quantity' => 4 ], 2 => ['quantity' => 5 ], 3 => ['quantity' => 3 ] ] );

$order = $order->fresh();
$order->products; // filled

----------------------------------------------------

59

$user = App\Models\User::first();
$user->payments; // empty

$order = $user->orders()->save( App\Models\Order::factory()->make() );

$user->orders;

$order = $user->orders->first();

$payment = $order->payment()->save( App\Models\Payment::factory()->make() );

$user->payments; // empty

$user = $user->fresh();

$user->payments; 
$user->orders; 

$orders = $user->orders()->find(2);

$order = $user->orders()->save( App\Models\Order::factory()->make() );
$user = $user->fresh();
$user->payments; 