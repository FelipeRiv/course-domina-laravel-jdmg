#reset DB and store the fake data
php artisan migrate:fresh --seed

56

## memory
$order = App\Models\Order::factory()->make();
$payment = App\Models\Payment::factory()->make( ['order_id' => $order->id] );

## DB
$order = App\Models\Order::factory()->create();
$payment = App\Models\Payment::factory()->create( ['order_id' => $order->id] );
$order->payment;

$payment->order;

// other
$payment->order();
$payment->order()->get(); // where etc is a query builder

---------------------------------------------------------

57

$user = App\Models\User::factory()->create();

$order = App\Models\Order::factory()->create(['customer_id' => $user->id]);

$user->orders; // error if customer_id not configure correctly
$order->user; // null if customer_id not configure correctly

## create an order linked to a user - save does the save but it allows instances , make returns an obj if we want to use it we will have to parse it to an array to use create method but we can use save instead

$user->orders()->save( App\Models\Order::factory()->make() );

$user = App\Models\User::first();

$user->orders; // a list of 2 if not create another order based on an user

-----------------------------------------------------------

58 Usando y creando relaciones muchos a muchos con Eloquent

php artisan make:migration CreateCartProductTable
php artisan make:migration CreateOrderProductTable

php artisan migrate:fresh --seed

php artisan tinker

$user = App\Models\User::factory()->create();
$order = App\Models\Order::factory()->create(['customer_id' => $user->id]);

$cart = App\Models\Cart::factory()->create();

$cart->products; // empty
$order->products; // empty

$order->attach();

// populate the relationship between tables in many to many relationship

// * insert through the relationship between order and product
// $order->products()->attach( [ 1,2,3,4] ); // * attach with the product ids it will fail bc we have the quantity linked to it

// * we have to say the quantity for the product id 1 and the product id 2 etc 
$order->products()->attach( [ 1 => ['quantity' => 4 ], 2 => ['quantity' => 5 ], 3 => ['quantity' => 3 ] ] );

$order = $order->fresh();
$order->products; // filled

----------------------------------------------------

59

$user = App\Models\User::first();
$user->payments; // empty

$order = $user->orders()->save( App\Models\Order::factory()->make() );

$user->orders;

$order = $user->orders->first();

$payment = $order->payment()->save( App\Models\Payment::factory()->make() );

$user->payments; // empty

$user = $user->fresh();

$user->payments; 
$user->orders; 

$orders = $user->orders()->find(2);

$order = $user->orders()->save( App\Models\Order::factory()->make() );
$user = $user->fresh();
$user->payments; 

--------------------------------------------------------------

60 domina las relaciones polimorfica uno a uno

$user = App\Models\User::factory()->create();

$user->image()->save( App\Models\Image::factory()->make() );

$user->image;
$image = $user->image;

$image->imageable

--------------------------------------------------------------

61 conoce las relaciones polimorficas de uno a muchos

$product = App\Models\Product::find(2);

$product->images()->save(  App\Models\Image::factory()->make() );

$image = App\Models\Image::find(2);

$image->imageable;

$product->images;

$product = $product->fresh();

$product->images;

--------------------------------------------------------------

62 Aprende sobre relaciones polimorficas de muchos a muchos

$product = App\Models\Product::find(3);
$cart = App\Models\Cart::factory()->create();
$user = App\Models\User::factory()->create();
$order = App\Models\Order::factory()->create(['customer_id' => $user->id]);

// * can be the other way around that would be more common
$products->orders()->attach( [ 1 => ['quantity' => 4 ] ] );
$product->orders;

$er = App\Models\Order::factory()->create(['customer_id' => $user->id]);
$cart->products()->attach( [ $product->id => ['quantity' => 7 ] ] );

$cart->products;
--------------------------------------------------------------

63 usando e insertando relaciones simples de modelos en el seeder de laravel

tinker

php artisan migrate:fresh --seed

App\Models\User::all();
App\Models\Order::all();

$order = App\Models\Order::first();
$order->payment;
$order->user;


--------------------------------------------------------------

64 usando e insertando relaciones polimorficas en el seeder de laravel


php artisan migrate:fresh --seed

php artisan tinker

$images = App\Models\Image::all();
$carts = App\Models\Cart::all();
$product = App\Models\Product::first();
$product->orders;
$product->carts;





--------------------------------------------------------------

65 usando scopes de Eloquent y mejorando la visualizacion de productos

    // * my own fix to images without . in the jpg extension

    select path, substr(path, 1, length(path)-3 ) || '.jpg'
    from images


   UPDATE images
	SET "path"=substr(path, 1, length(path)-3 ) || '.jpg'

--------------------------------------------------------------

66 usando recursos aninados en laravel para agregar productos al carrito


// * link a product to a cart 

php artisan make:controller ProductCartController -m Cart -p Product

php artisan route:list

--------------------------------------------------------------

67 usando coockies en laravel para resolver el carrito de compras 

--------------------------------------------------------------


68 mejora el servicio del carrito y permite remover sus productos con laravel



--------------------------------------------------------------

69 usando inyeccion de dependencias y mostrando los producctos de un carrito



--------------------------------------------------------------


70 usa colecciones e inyeccionen Blade para mostrar el contador del carrito



--------------------------------------------------------------

71 confirmando e inicianod una orden desde el carrito de compras 



--------------------------------------------------------------

72 usando atributos computados en laravel para calcular los totales



--------------------------------------------------------------

73 identificando el usuario autenticado con laravel para crear una orden



--------------------------------------------------------------


74 usa un controlador de recursos aninados de laravel para cobrar una orden

php artisan make:controller OrderPaymentController -m Payment -p Order
php artisan migrate:fresh --seed

--------------------------------------------------------------

